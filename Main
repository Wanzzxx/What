if game.PlaceId ~= 72829404259339 then return end
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Windows
local Window = Fluent:CreateWindow({
    Title = "Wanz HUB",
    SubTitle = "Private Versions",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- ⏱ Time‑Since‑Executed “notification” (Smaller, centered)
-- Put in a LocalScript (e.g., StarterPlayerScripts)

local Players    = game:GetService("Players")
local RunService = game:GetService("RunService")
local playerGui  = Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create GUI container
local gui = Instance.new("ScreenGui")
gui.Name = "ElapsedTimerGui"
gui.ResetOnSpawn = false
gui.DisplayOrder = 10
gui.IgnoreGuiInset = true
gui.Parent = playerGui

-- Frame (centered, smaller)
local frame = Instance.new("Frame")
frame.AnchorPoint = Vector2.new(0.5, 0) -- Center horizontally
frame.Position    = UDim2.new(0.5, 0, 0, 30)
frame.Size        = UDim2.new(0, 200, 0, 50)
frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
frame.BackgroundTransparency = 0.15
frame.BorderSizePixel = 0
frame.Parent = gui

Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 8)

-- Title text
local title = Instance.new("TextLabel")
title.Size          = UDim2.new(1, -12, 0, 20)
title.Position      = UDim2.new(0, 6, 0, 4)
title.Text          = "Timer Since Script Executed:"
title.Font          = Enum.Font.GothamBold
title.TextSize      = 16
title.TextColor3    = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1
title.TextXAlignment = Enum.TextXAlignment.Center
title.Parent = frame

local body = Instance.new("TextLabel")
body.Size           = UDim2.new(1, -12, 0, 20)
body.Position       = UDim2.new(0, 6, 0, 26)
body.Text           = "0:00"
body.Font           = Enum.Font.Gotham
body.TextSize       = 14
body.TextColor3     = Color3.new(1, 1, 1)
body.BackgroundTransparency = 1
body.TextXAlignment = Enum.TextXAlignment.Center
body.Parent = frame

-- Timer logic
local startTick = tick()

RunService.RenderStepped:Connect(function()
    local elapsed = math.floor(tick() - startTick)
    local minutes = math.floor(elapsed / 60)
    local seconds = elapsed % 60

    if minutes > 59 then
        local hours = math.floor(minutes / 60)
        minutes = minutes % 60
        body.Text = string.format("%d:%02d:%02d", hours, minutes, seconds)
    else
        body.Text = string.format("%d:%02d", minutes, seconds)
    end
end)


-- Logo
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

local logoGui = Instance.new("ScreenGui")
logoGui.Name = "FluentLogoToggle"
logoGui.ResetOnSpawn = false
logoGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
logoGui.Parent = player:WaitForChild("PlayerGui")

local logoButton = Instance.new("ImageButton")
logoButton.Name = "LogoButton"
logoButton.Size = UDim2.new(0, 50, 0, 50)
logoButton.Position = UDim2.new(0, 10, 0, 10)
logoButton.BackgroundTransparency = 1
logoButton.Image = "rbxassetid://98905775020119"
logoButton.Parent = logoGui

local isMinimized = false
local function toggleFluent()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)
end

logoButton.Activated:Connect(toggleFluent)

UserInputService.InputBegan:Connect(function(input, gpe)
    if not gpe and input.KeyCode == Enum.KeyCode.LeftControl then
        toggleFluent()
    end
end)

local Tabs = {
    Main = Window:AddTab({ Title = "Menu", Icon = "home" }),
    Joiner = Window:AddTab({ Title = "Auto Join", Icon = "users" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "shopping-cart" }),
    Webhook = Window:AddTab({ Title = "Webhook", Icon = "globe" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "layers" }),
    Settings = Window:AddTab({ Title = "Pengaturan", Icon = "settings" })
}

local Options = Fluent.Options
local votingActive = { Next = false, Retry = false }
local buyActive = false

-- Toggle

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local LocalPlayer = Players.LocalPlayer

--// Persistent Storage
local configFile = "webhook_settings.json"
local Options = _G.Options or {}
_G.Options = Options

-- Load from file
local function loadSettings()
    if isfile and isfile(configFile) then
        local success, content = pcall(readfile, configFile)
        if success then
            local decoded = HttpService:JSONDecode(content)
            Options.WebhookURL_Value = decoded.WebhookURL or ""
            Options.ActiveWebhook_Value = decoded.ActiveWebhook or false
        end
    end
end

-- Save to file
local function saveSettings()
    if writefile then
        local data = {
            WebhookURL = Options.WebhookURL.Value,
            ActiveWebhook = Options.ActiveWebhook.Value
        }
        writefile(configFile, HttpService:JSONEncode(data))
    end
end

loadSettings()

--// Fluent UI Webhook Tab
Options.WebhookURL = Tabs.Webhook:AddInput("WebhookInput", {
    Title = "Paste Your Webhook",
    Default = Options.WebhookURL_Value or "",
    Placeholder = "https://discord.com/api/webhooks/...",
    Finished = true,
    Callback = function(Value)
        Options.WebhookURL_Value = Value
        saveSettings()
    end
})

Options.ActiveWebhook = Tabs.Webhook:AddToggle("ActiveWebhookToggle", {
    Title = "Active Webhook",
    Default = Options.ActiveWebhook_Value or false,
    Callback = function(v)
        Options.ActiveWebhook_Value = v
        saveSettings()
    end
})

--// Helper: Get Accurate Player Item Amount
local function getPlayerItemAmount(name)
    local playerFolder = ReplicatedStorage:FindFirstChild("Player_Data"):FindFirstChild(LocalPlayer.Name)
    if not playerFolder then return 0 end

    -- First: check Items folder
    local itemsFolder = playerFolder:FindFirstChild("Items")
    if itemsFolder then
        local item = itemsFolder:FindFirstChild(name)
        if item and item:FindFirstChild("Amount") then
            return item.Amount.Value
        end
    end

    -- Second: check Data folder
    local dataFolder = playerFolder:FindFirstChild("Data")
    if dataFolder then
        local stat = dataFolder:FindFirstChild(name)
        if stat and stat:IsA("NumberValue") then
            return stat.Value
        end
    end

    return 0
end

--// Send Webhook
local function sendWebhook(results)
    if not Options.ActiveWebhook.Value then return end
    local url = Options.WebhookURL.Value
    if url == "" then return end

    local placeName = MarketplaceService:GetProductInfo(game.PlaceId).Name
    local data = {
        username = "WanzHook",
        embeds = {{
            title = "Results:",
            fields = {
                { name = "Username", value = LocalPlayer.Name, inline = true },
                { name = "UserID", value = tostring(LocalPlayer.UserId), inline = true },
                { name = "Place", value = placeName, inline = false },
                { name = "Time", value = os.date("%Y-%m-%d %H:%M:%S"), inline = false },
                { name = "Rewards", value = results, inline = false }
            }
        }}
    }

    local success, err = pcall(function()
        request({
            Url = url,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(data)
        })
    end)

    if not success then
        warn("Webhook failed:", err)
    end
end

--// Game Result Handler
local lastNotify = 0
local function showGameResults()
    if os.time() - lastNotify < 4 then return end
    lastNotify = os.time()

    task.spawn(function()
        local timeout = 5
        local rw
        repeat
            rw = LocalPlayer:FindFirstChild("RewardsShow")
            task.wait(0.25)
            timeout -= 0.25
        until rw or timeout <= 0

        if not rw then
            Fluent:Notify({ Title = "Game Ended", Content = "No rewards panel found", Duration = 3 })
            return
        end

        -- Wait a bit for children to populate
        task.wait(1)

        local children = rw:GetChildren()
        if #children == 0 then
            Fluent:Notify({ Title = "Game Ended", Content = "No rewards detected", Duration = 3 })
            return
        end

        local lines = {}
        for _, item in ipairs(children) do
            local rewardName = item.Name
            local amount = item:IsA("NumberValue") and item.Value or ((item:FindFirstChild("Amount") and item.Amount.Value) or 1)
            local nowAmount = getPlayerItemAmount(rewardName)
            table.insert(lines, ("[ %dx ] %s  [Now: %dx]"):format(amount, rewardName, nowAmount))
        end

        local resultText = table.concat(lines, "\n")
        Fluent:Notify({ Title = "Results Notify", Content = resultText, Duration = 6 })
        sendWebhook(resultText)
    end)
end

--// Auto Detect Game End
task.spawn(function()
    while task.wait(0.5) do
        local pg = LocalPlayer:FindFirstChild("PlayerGui")
        if pg and pg:FindFirstChild("GameEndedAnimationUI") then
            showGameResults()
            repeat task.wait(1) until not pg:FindFirstChild("GameEndedAnimationUI")
        end
    end
end)

local selectedSpeed = 1
local loopActive = true

-- Dropdown
Options.GameSpeed = Tabs.Main:AddDropdown("GameSpeed", {
    Title = "Change Game Speed",
    Values = {"1", "2", "3"},
    Default = "2"
})

-- Loop
task.spawn(function()
    while task.wait(1) do
        if loopActive and selectedSpeed then
            local args = { [1] = selectedSpeed }
            game:GetService("ReplicatedStorage").Remote.SpeedGamepass:FireServer(unpack(args))
        end
    end
end)

-- When dropdown is changed
Options.GameSpeed:OnChanged(function(speedValue)
    local speedNum = tonumber(speedValue)
    if speedNum then
        selectedSpeed = speedNum
        Fluent:Notify({
            Title = "Speed Changed",
            Content = "Current Speed: " .. speedValue,
            Duration = 3
        })
    end
end)

Options.PingFreezeRejoin = Tabs.Misc:AddToggle("PingFreezeRejoin", {
    Title = "Auto Rejoin When Ping Freeze/Stuck",
    Default = false
})

do
    local heartbeatConnection = nil

    Options.PingFreezeRejoin:OnChanged(function(enabled)
        if enabled then
            Fluent:Notify({
                Title = "Auto Rejoin",
                Content = "Enabled: Rejoining if ping freezes for 20 seconds",
                Duration = 4
            })

            local Players = game:GetService("Players")
            local TeleportService = game:GetService("TeleportService")
            local RunService = game:GetService("RunService")
            local LocalPlayer = Players.LocalPlayer
            local lastPing = 0
            local lastChangeTime = tick()
            local PING_FREEZE_LIMIT = 20

            heartbeatConnection = RunService.Heartbeat:Connect(function()
                local success, currentPing = pcall(function()
                    return stats().Network.ServerStatsItem["Data Ping"]:GetValue()
                end)

                if not success then return end

                if currentPing ~= lastPing then
                    lastPing = currentPing
                    lastChangeTime = tick()
                elseif tick() - lastChangeTime >= PING_FREEZE_LIMIT then
                    Fluent:Notify({
                        Title = "Auto Rejoin",
                        Content = "Ping frozen! Rejoining...",
                        Duration = 4
                    })
                    TeleportService:Teleport(game.PlaceId, LocalPlayer)
                end
            end)
        else
            Fluent:Notify({
                Title = "Auto Rejoin",
                Content = "Disabled",
                Duration = 3
            })

            if heartbatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
        end
    end)
end

-- Claim Quest
Options.AutoClaimQuest = Tabs.Misc:AddToggle("AutoClaimQuest", {
    Title   = "Auto Claim All Quest",
    Default = false
})

Options.AutoClaimQuest:OnChanged(function(state)
    if not state then return end

    task.spawn(function()
        local RS = game:GetService("ReplicatedStorage")
        local questRemote = RS.Remote.Server.Gameplay.QuestEvent

        while Options.AutoClaimQuest.Value and not Fluent.Unloaded do
            questRemote:FireServer({ [1] = "ClaimAll" })
            task.wait(20)                                   -- loop delay
        end
    end)
end)

-- Joiner

-- Dropdown (Chapter selector)
Options.GateRaidChapter = Tabs.Joiner:AddDropdown("GateRaidChapter", {
    Title = "Select Gate Raid Chapter",
    Values = {"TheGatedCity_Chapter1", "TheGatedCity_Chapter2", "TheGatedCity_Chapter3", "TheGatedCity_Chapter4"},
    Multi = false,
    Default = "TheGatedCity_Chapter1",
})

-- Toggle (Auto Join Gate Raid)
Options.AutoJoinGateRaid = Tabs.Joiner:AddToggle("AutoJoinGateRaid", {
    Title = "Auto Join Gate Raid",
    Default = false,
    Callback = function(enabled)
        if not enabled then return end

        task.spawn(function()
            while Options.AutoJoinGateRaid.Value and not Fluent.Unloaded do
                if workspace:FindFirstChild("Lobby") then
                    local ReplicatedStorage = game:GetService("ReplicatedStorage")
                    local Remote = ReplicatedStorage:WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event")

                    -- Step 1: Create
                    Remote:FireServer("Create")
                    -- Step 2: Change Mode
                    Remote:FireServer("Change-Mode", {["Mode"] = "Raids Stage"})
                    -- Step 3: Change World
                    Remote:FireServer("Change-World", {["World"] = "TheGatedCity"})
                    -- Step 4: Change Chapter (from dropdown)
                    Remote:FireServer("Change-Chapter", {["Chapter"] = Options.GateRaidChapter:GetValue()})
                    -- Step 5: Submit
                    Remote:FireServer("Submit")
                    -- Step 6: Start
                    Remote:FireServer("Start")

                    break -- only do once
                else
                    warn("[AutoJoinGateRaid] No workspace.Lobby found, retrying...")
                end
                task.wait(2) -- retry every 2s
            end
        end)
    end
})

Tabs.Joiner:AddParagraph({
    Title = "- Dungeon -",
    Content = ""
})

-- Dropdown for dungeon difficulty
Options.DungeonDifficulty = Tabs.Joiner:AddDropdown("DungeonDifficulty", {
    Title = "Dungeon Difficulty",
    Values = {"Easy", "Normal", "Hell"},
    Default = "Normal"
})

-- Toggle for Auto Join Dungeon
Options.AutoJoinDungeon = Tabs.Joiner:AddToggle("AutoJoinDungeon", {
    Title = "Auto Join Dungeon",
    Default = false
})

Options.AutoJoinDungeon:OnChanged(function(enabled)
    if not enabled then return end

    task.spawn(function()
        while Options.AutoJoinDungeon.Value and not Fluent.Unloaded do
            if workspace:FindFirstChild("Lobby") then
                local difficulty = Options.DungeonDifficulty.Value or "Normal"

                local args = {
                    [1] = "Dungeon",
                    [2] = { ["Difficulty"] = difficulty }
                }

                game:GetService("ReplicatedStorage")
                    :WaitForChild("Remote")
                    :WaitForChild("Server")
                    :WaitForChild("PlayRoom")
                    :WaitForChild("Event")
                    :FireServer(unpack(args))

                Fluent:Notify({
                    Title = "Auto Join Dungeon",
                    Content = "Joined Dungeon (" .. difficulty .. ")",
                    Duration = 3
                })

                break -- only trigger once per activation
            end
            task.wait(2)
        end
    end)
end)

Tabs.Joiner:AddParagraph({
    Title = "- Event -",
    Content = ""
})

-- Auto Join Fall Event
Options.AutoJoinFallEvent = Tabs.Joiner:AddToggle("AutoJoinFallEvent", {
    Title = "Auto Join Fall Event",
    Default = false
})

Options.AutoJoinFallEvent:OnChanged(function(enabled)
    if not enabled then return end

    task.spawn(function()
        while Options.AutoJoinFallEvent.Value and not Fluent.Unloaded do
            if workspace:FindFirstChild("Lobby") then
                local args = {
                    [1] = "Swarm Event"
                }

                game:GetService("ReplicatedStorage")
                    :WaitForChild("Remote")
                    :WaitForChild("Server")
                    :WaitForChild("PlayRoom")
                    :WaitForChild("Event")
                    :FireServer(unpack(args))

                Fluent:Notify({
                    Title = "Auto Join Fall Event",
                    Content = "Attempted to join Fall Event",
                    Duration = 3
                })

                break -- only trigger once per activation
            end
            task.wait(2)
        end
    end)
end)

Tabs.Joiner:AddParagraph({
    Title = "- Others -",
    Content = ""
})

Options.AutoJoinBossRush = Tabs.Joiner:AddToggle("AutoJoinBossRush", {
    Title = "Auto Join Boss Rush",
    Default = false
})

Options.AutoJoinBossRush:OnChanged(function(enabled)
    if not enabled then return end

    task.spawn(function()
        while Options.AutoJoinBossRush.Value and not Fluent.Unloaded do
            if workspace:FindFirstChild("Lobby") then
                local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
                local playRoomGui = playerGui:WaitForChild("PlayRoom")
                playRoomGui.Enabled = true

                local function manageBossRush()
                    local createArgs = {
                        [1] = "BossRush"
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(createArgs))

                    wait(2)

                    local startArgs = {
                        [1] = "Start"
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(startArgs))
                end

                manageBossRush()
                break
            else
                warn("Lobby not found - Boss Rush script not executed")
            end
            task.wait(2)
        end
    end)
end)

Options.AutoJoinChallenge = Tabs.Joiner:AddToggle("AutoJoinChallenge", {
    Title = "Auto Join Challenge",
    Default = false
})

Options.AutoJoinChallenge:OnChanged(function(enabled)
    if not enabled then return end

    task.spawn(function()
        while Options.AutoJoinChallenge.Value and not Fluent.Unloaded do
            if workspace:FindFirstChild("Lobby") then
                -- Enable the GUI
                local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
                local playRoomGui = playerGui:FindFirstChild("PlayRoom")
                if playRoomGui then
                    playRoomGui.Enabled = true
                end

                -- Function to create and start the room
                local function manageRoom()
                    local createArgs = {
                        [1] = "Create",
                        [2] = {
                            ["CreateChallengeRoom"] = true
                        }
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(createArgs))

                    task.wait(2)

                    local startArgs = {
                        [1] = "Start"
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(startArgs))
                end

                manageRoom()
                break -- run only once per activation
            end
            task.wait(2)
        end
    end)
end)

-- Merchant

Tabs.Shop:AddParagraph({
    Title = "- Merchant -",
    Content = ""
})

local buyLoop

local itemList = {
    ["Perfect Stats Key"] = "Perfect Stats Key",
    ["Stats Key"] = "Stats Key",
    ["Soul Fragments"] = "Soul Fragments",
    ["Trait Reroll"] = "Trait Reroll",
    ["Dr. Megga Punk"] = "Dr. Megga Punk",
    ["Cursed Finger"] = "Cursed Finger",
    ["Ranger Crystal"] = "Ranger Crystal"
}

local selectedItems = {}

local function getTableKeys(tbl)
    local keys = {}
    for k, _ in pairs(tbl) do
        table.insert(keys, k)
    end
    return keys
end

local multiBuyDropdown = Tabs.Shop:AddDropdown("AutoBuyItems", {
    Title = "Auto Buy [Merchant]",
    Description = "Select Wanted Items",
    Values = getTableKeys(itemList),
    Multi = true,
    Default = {},
})

multiBuyDropdown:OnChanged(function(Value)
    selectedItems = {}
    for itemName, state in pairs(Value) do
        if state then
            table.insert(selectedItems, itemName)
        end
    end
    Fluent:Notify({
        Title = "Auto Buy",
        Content = "Selected: " .. table.concat(selectedItems, ", "),
        Duration = 4
    })
end)


Options.AutoBuyToggle = Tabs.Shop:AddToggle("AutoBuyToggle", {
    Title = "Buy Items",
    Default = false
})

Options.AutoBuyToggle:OnChanged(function(enabled)
    buyActive = enabled
    if enabled then
        Fluent:Notify({
            Title = "Auto Buy",
            Content = "Started auto-buying...",
            Duration = 4
        })

        buyLoop = task.spawn(function()
            local RS = game:GetService("ReplicatedStorage")
            while buyActive and not Fluent.Unloaded do
                for _, itemName in pairs(selectedItems) do
                    local args = {
                        [1] = itemName,
                        [2] = 1
                    }
                    RS.Remote.Server.Gameplay.Merchant:FireServer(unpack(args))
                    task.wait(0.1) -- delay to avoid flooding
                end
                task.wait(0.1) -- overall loop delay
            end
        end)
    else
        if buyLoop then
            task.cancel(buyLoop)
            buyLoop = nil
        end
        Fluent:Notify({
            Title = "Auto Buy",
            Content = "Stopped auto-buying.",
            Duration = 3
        })
    end
end)

Tabs.Shop:AddParagraph({
    Title = "- Raid Shop -",
    Content = ""
})

local RaidShopItems = {
    "Trait Reroll",
    "Stats Key",
    "Dr. Megga Punk",
    "Perfect Stats Key",
    "Cursed Finger",
    "Gourmet Meal"
}

-- Raid shop
local RaidDropdown = Tabs.Shop:AddDropdown("RaidShopItems", {
    Title = "Auto Buy [Raid Shop]",
    Description = "Select Wanted Items",
    Values = RaidShopItems,
    Multi = true,
    Default = {},
})

local selectedRaidItems = {}

RaidDropdown:OnChanged(function(Value)
    selectedRaidItems = Value -- Store selected items
end)

Options.AutoBuyRaidShop = Tabs.Shop:AddToggle("AutoBuyRaidShop", {
    Title = "Buy Items",
    Default = false,
})

Options.AutoBuyRaidShop:OnChanged(function(enabled)
    if enabled then
        Fluent:Notify({
            Title = "Raid Shop Auto Buy",
            Content = "Auto-buy started for selected items.",
            Duration = 4
        })

        task.spawn(function()
            while Options.AutoBuyRaidShop.Value and not Fluent.Unloaded do
                for itemName, isSelected in pairs(selectedRaidItems) do
                    if isSelected then
                        local success, err = pcall(function()
                            local args = { [1] = itemName, [2] = 1 }
                            game:GetService("ReplicatedStorage").Remote.Server.Gameplay.Raid_Shop:FireServer(unpack(args))
                        end)
                        if not success then
                            warn("[AutoBuy RaidShop] Failed to buy:", itemName, err)
                        end
                        task.wait(0.1)
                    end
                end
                task.wait(0.1)
            end
        end)
    else
        Fluent:Notify({
            Title = "Raid Shop Auto Buy",
            Content = "Auto-buy stopped.",
            Duration = 3
        })
    end
end)

-- Graveyard Raid Shop Items
local GraveyardItems = {
    "Trait Reroll",
    "Stats Key",
    "Perfect Stats Key",
    "All-In Toast",
    "Cursed Finger"
}

local selectedGraveyardItems = {}

-- Multi Dropdown
local GraveyardDropdown = Tabs.Shop:AddDropdown("GraveyardRaidShopItems", {
    Title = "Auto Buy [Graveyard Raid Shop]",
    Description = "Select Wanted Items",
    Values = GraveyardItems,
    Multi = true,
    Default = {},
})

GraveyardDropdown:OnChanged(function(Value)
    selectedGraveyardItems = Value -- Store selected items
    local chosen = {}
    for item, state in pairs(Value) do
        if state then
            table.insert(chosen, item)
        end
    end
    if #chosen > 0 then
        Fluent:Notify({
            Title = "Auto Buy [Graveyard Raid Shop]",
            Content = "Selected: " .. table.concat(chosen, ", "),
            Duration = 4
        })
    end
end)

-- Toggle for Auto Buy
Options.AutoBuyGraveyard = Tabs.Shop:AddToggle("AutoBuyGraveyard", {
    Title = "Buy Items (Graveyard)",
    Default = false,
})

Options.AutoBuyGraveyard:OnChanged(function(enabled)
    if enabled then
        Fluent:Notify({
            Title = "Graveyard Raid Shop",
            Content = "Auto-buy started for selected items.",
            Duration = 4
        })

        task.spawn(function()
            while Options.AutoBuyGraveyard.Value and not Fluent.Unloaded do
                for itemName, isSelected in pairs(selectedGraveyardItems) do
                    if isSelected then
                        local success, err = pcall(function()
                            local args = { [1] = itemName, [2] = 1 }
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("Remote")
                                :WaitForChild("Server")
                                :WaitForChild("Gameplay")
                                :WaitForChild("RaidCSW_Shop")
                                :FireServer(unpack(args))
                        end)
                        if not success then
                            warn("[AutoBuy Graveyard] Failed to buy:", itemName, err)
                        end
                        task.wait(0.2)
                    end
                end
                task.wait(0.5)
            end
        end)
    else
        Fluent:Notify({
            Title = "Graveyard Raid Shop",
            Content = "Auto-buy stopped.",
            Duration = 3
        })
    end
end)

-- Vote Toggles

Tabs.Main:AddParagraph({
    Title = "- Vote Menu -",
    Content = ""
})

-- Vote Next
Options.VoteNext = Tabs.Main:AddToggle("VoteNext", {
    Title = "Vote Next",
    Default = false
})

Options.VoteNext:OnChanged(function(v)
    votingActive.Next = v
    if v then
        Options.VoteRetry:SetValue(false)
        Fluent:Notify({
            Title = "Vote",
            Content = "Auto-voting for Next map",
            Duration = 3
        })
    else
        votingActive.Next = false
    end
end)

-- Vote Retry
Options.VoteRetry = Tabs.Main:AddToggle("VoteRetry", {
    Title = "Vote Retry",
    Default = false
})

Options.VoteRetry:OnChanged(function(v)
    votingActive.Retry = v
    if v then
        Options.VoteNext:SetValue(false)
        Fluent:Notify({
            Title = "Vote",
            Content = "Auto-voting for Retry map",
            Duration = 3
        })
    else
        votingActive.Retry = false
    end
end)

-- Auto vote handler (runs in background)
task.spawn(function()
    local RS = game:GetService("ReplicatedStorage")
    local LocalPlayer = game:GetService("Players").LocalPlayer

    while task.wait(1) do
        if (votingActive.Next or votingActive.Retry) and not workspace:FindFirstChild("Lobby") then
            local pg = LocalPlayer:FindFirstChild("PlayerGui")

            if pg and pg:FindFirstChild("GameEndedAnimationUI") then
                -- Wait 1 second to confirm UI still exists
                task.wait(1)
                if not pg:FindFirstChild("GameEndedAnimationUI") then
                    continue
                end

                -- Notify once per game end
                if votingActive.Next then
                    Fluent:Notify({
                        Title = "Vote",
                        Content = "Auto-voting Next...",
                        Duration = 3
                    })
                elseif votingActive.Retry then
                    Fluent:Notify({
                        Title = "Vote",
                        Content = "Auto-voting Retry...",
                        Duration = 3
                    })
                end

                -- Keep voting until UI disappears
                repeat
                    if votingActive.Next then
                        RS.Remote.Server.OnGame.Voting.VoteNext:FireServer()
                    elseif votingActive.Retry then
                        RS.Remote.Server.OnGame.Voting.VoteRetry:FireServer()
                    end
                    task.wait(2)
                until not (pg:FindFirstChild("GameEndedAnimationUI") and (votingActive.Next or votingActive.Retry))
            end
        end
    end
end)


Options.AutoStart = Tabs.Main:AddToggle("AutoStart", {
    Title = "Auto Start",
    Default = false
})

Options.AutoStart:OnChanged(function(state)
    if not state then
        Fluent:Notify({
            Title = "Auto Start",
            Content = "Disabled (no settings reverted)",
            Duration = 3
        })
        return
    end

    local RS = game:GetService("ReplicatedStorage")
    local SettingFolder = RS:FindFirstChild("Player_Settings") or RS:WaitForChild("Player_Settings")
    local PlayerSettings = SettingFolder and SettingFolder:FindFirstChild(game.Players.LocalPlayer.Name)

    local settingName = "Auto Vote Start"
    local desiredValue = true

    task.spawn(function()
        local currentSetting = nil
        if PlayerSettings then
            local settingObj = PlayerSettings:FindFirstChild(settingName)
            if settingObj and settingObj:IsA("BoolValue") then
                currentSetting = settingObj.Value
            end
        end

        if currentSetting ~= desiredValue then
            RS.Remote.Server.Settings.Setting_Event:FireServer(settingName, desiredValue)
            Fluent:Notify({
                Title = "Auto Start",
                Content = "Setting applied!",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Auto Start",
                Content = "Already set, nothing changed",
                Duration = 3
            })
        end
    end)
end)

-- Play sound on script execution
task.spawn(function()
    local SoundService = game:GetService("SoundService")
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://128329076976634"
    sound.Volume = 3
    sound.Looped = false
    sound.Parent = SoundService
    sound:Play()
end)

-- Save
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

task.spawn(function()
    local VirtualUser = game:GetService("VirtualUser")
    local player = game:GetService("Players").LocalPlayer

    player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end)

Window:SelectTab(1)
Fluent:Notify({ Title = "Fluent", Content = "The script has been loaded.", Duration = 8 })
SaveManager:LoadAutoloadConfig()
