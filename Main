if game.PlaceId ~= 72829404259339 then return end
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Windows
local Window = Fluent:CreateWindow({
    Title = "Wanz HUB",
    SubTitle = "Private Versions",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Logo
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

local logoGui = Instance.new("ScreenGui")
logoGui.Name = "FluentLogoToggle"
logoGui.ResetOnSpawn = false
logoGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
logoGui.Parent = player:WaitForChild("PlayerGui")

local logoButton = Instance.new("ImageButton")
logoButton.Name = "LogoButton"
logoButton.Size = UDim2.new(0, 50, 0, 50)
logoButton.Position = UDim2.new(0, 10, 0, 10)
logoButton.BackgroundTransparency = 1
logoButton.Image = "rbxassetid://98905775020119"
logoButton.Parent = logoGui

local isMinimized = false
local function toggleFluent()
    isMinimized = not isMinimized
    Window:Minimize(isMinimized)
end

logoButton.Activated:Connect(toggleFluent)

UserInputService.InputBegan:Connect(function(input, gpe)
    if not gpe and input.KeyCode == Enum.KeyCode.LeftControl then
        toggleFluent()
    end
end)


local Tabs = {
    Main = Window:AddTab({ Title = "Menu", Icon = "" }),
    Joiner = Window:AddTab ({ Title = "Auto Join", Icon = "" }),
    Shop = Window:AddTab ({ Title = "Shop", Icon = "" }),
    Misc = Window:AddTab({ Title = "Menu Tambahan", Icon = "settings" }),
    Settings = Window:AddTab({ Title = "Pengaturan", Icon = "settings" })
}

local Options = Fluent.Options
local votingActive = { Next = false, Retry = false }
local buyActive = false

-- Toggle

local selectedSpeed = 1
local loopActive = true

-- Dropdown
Options.GameSpeed = Tabs.Main:AddDropdown("GameSpeed", {
    Title = "Change Game Speed",
    Values = {"1", "2", "3"},
    Default = "1"
})

-- Loop
task.spawn(function()
    while task.wait(1) do
        if loopActive and selectedSpeed then
            local args = { [1] = selectedSpeed }
            game:GetService("ReplicatedStorage").Remote.SpeedGamepass:FireServer(unpack(args))
        end
    end
end)

-- When dropdown is changed
Options.GameSpeed:OnChanged(function(speedValue)
    local speedNum = tonumber(speedValue)
    if speedNum then
        selectedSpeed = speedNum
        Fluent:Notify({
            Title = "Speed Changed",
            Content = "Current Speed: " .. speedValue,
            Duration = 3
        })
    end
end)

Options.PingFreezeRejoin = Tabs.Misc:AddToggle("PingFreezeRejoin", {
    Title = "Auto Rejoin When Ping Freeze/Stuck",
    Default = false
})

do
    local heartbeatConnection = nil

    Options.PingFreezeRejoin:OnChanged(function(enabled)
        if enabled then
            Fluent:Notify({
                Title = "Auto Rejoin",
                Content = "Enabled: Rejoining if ping freezes for 20 seconds",
                Duration = 4
            })

            local Players = game:GetService("Players")
            local TeleportService = game:GetService("TeleportService")
            local RunService = game:GetService("RunService")
            local LocalPlayer = Players.LocalPlayer
            local lastPing = 0
            local lastChangeTime = tick()
            local PING_FREEZE_LIMIT = 20

            heartbeatConnection = RunService.Heartbeat:Connect(function()
                local success, currentPing = pcall(function()
                    return stats().Network.ServerStatsItem["Data Ping"]:GetValue()
                end)

                if not success then return end

                if currentPing ~= lastPing then
                    lastPing = currentPing
                    lastChangeTime = tick()
                elseif tick() - lastChangeTime >= PING_FREEZE_LIMIT then
                    Fluent:Notify({
                        Title = "Auto Rejoin",
                        Content = "Ping frozen! Rejoining...",
                        Duration = 4
                    })
                    TeleportService:Teleport(game.PlaceId, LocalPlayer)
                end
            end)
        else
            Fluent:Notify({
                Title = "Auto Rejoin",
                Content = "Disabled",
                Duration = 3
            })

            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
        end
    end)
end

Options.AutoBossRush = Tabs.Main:AddToggle("AutoBossRush", {
    Title = "Auto Boss Rush [Delta Seraph/Capitalist Needed]",
    Default = false
})

Options.AutoBossRush:OnChanged(function(enabled)
    if not enabled then return end           -- Only act on ON

    task.spawn(function()
        -- One‑time delay **before** we do anything else
        task.wait(18)
        if not Options.AutoBossRush.Value or Fluent.Unloaded then return end

        --// Services
        local RS = game:GetService("ReplicatedStorage")
        local Players = game:GetService("Players")
        local LP = Players.LocalPlayer
        local Remotes = RS.Remote.Server.Units

        -- Helper: get Delta
        local function getDeltaCollection()
            local pd = RS:WaitForChild("Player_Data")
            local f  = pd:FindFirstChild(LP.Name) or pd:FindFirstChild(tostring(LP.UserId))
            if not f then warn("[Delta‑Auto] Player_Data folder not found.") return end
            return f:WaitForChild("Collection"):WaitForChild("Delta")
        end

        -- Upgrade Delta 5×
        local function upgradeDelta()
            local unit = LP:WaitForChild("UnitsFolder"):WaitForChild("Delta")
            for _ = 1, 5 do
                Remotes.Upgrade:FireServer(unit)
                task.wait(0.1)
            end
        end

        -- Main loop
        local paths = {4, 1, 2, 3}
        local delta = getDeltaCollection()
        if not delta then return end

        while Options.AutoBossRush.Value and not Fluent.Unloaded do
            for _, id in ipairs(paths) do
                if not Options.AutoBossRush.Value then break end
                upgradeDelta()
                Remotes.Deployment:FireServer(delta)
                task.wait(0.05)
                Remotes.SelectWay:FireServer(id)
                task.wait(3.2)
            end
        end
    end)
end)

Options.AutoJoinBossRush = Tabs.Joiner:AddToggle("AutoJoinBossRush", {
    Title = "Auto Join Boss Rush",
    Default = false
})

Options.AutoJoinBossRush:OnChanged(function(enabled)
    if not enabled then return end

    task.spawn(function()
        while Options.AutoJoinBossRush.Value and not Fluent.Unloaded do
            if workspace:FindFirstChild("Lobby") then
                local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
                local playRoomGui = playerGui:WaitForChild("PlayRoom")
                playRoomGui.Enabled = true

                local function manageBossRush()
                    local createArgs = {
                        [1] = "BossRush"
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(createArgs))

                    wait(2)

                    local startArgs = {
                        [1] = "Start"
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(startArgs))
                end

                manageBossRush()
                break
            else
                warn("Lobby not found - Boss Rush script not executed")
            end
            task.wait(2)
        end
    end)
end)

-- Auto Join Summer Event
Options.AutoJoinSummer = Tabs.Joiner:AddToggle("AutoJoinSummer", {
    Title = "Auto Join Summer Event",
    Default = false
})

Options.AutoJoinSummer:OnChanged(function(enabled)
    if enabled then
        Fluent:Notify({
            Title = "Summer Event",
            Content = "Waiting for Lobby...",
            Duration = 4
        })

        task.spawn(function()
            local RS = game:GetService("ReplicatedStorage")
            while Options.AutoJoinSummer.Value and not Fluent.Unloaded do
                if workspace:FindFirstChild("Lobby") then
                    local success, err = pcall(function()
                        local args = { [1] = "Summer-Event" }
                        RS:WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
                        Fluent:Notify({
                            Title = "Summer Event",
                            Content = "Joined Summer Event!",
                            Duration = 4
                        })
                    end)

                    if success then break end
                end
                task.wait(2)
            end
        end)
    else
        Fluent:Notify({ Title = "Summer Event", Content = "Auto join disabled", Duration = 3 })
    end
end)

Options.AutoJoinChallenge = Tabs.Joiner:AddToggle("AutoJoinChallenge", {
    Title = "Auto Join Challenge",
    Default = false
})

Options.AutoJoinChallenge:OnChanged(function(enabled)
    if not enabled then return end

    task.spawn(function()
        while Options.AutoJoinChallenge.Value and not Fluent.Unloaded do
            if workspace:FindFirstChild("Lobby") then
                -- Enable the GUI
                local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
                local playRoomGui = playerGui:FindFirstChild("PlayRoom")
                if playRoomGui then
                    playRoomGui.Enabled = true
                end

                -- Function to create and start the room
                local function manageRoom()
                    local createArgs = {
                        [1] = "Create",
                        [2] = {
                            ["CreateChallengeRoom"] = true
                        }
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(createArgs))

                    task.wait(2)

                    local startArgs = {
                        [1] = "Start"
                    }
                    game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event:FireServer(unpack(startArgs))
                end

                manageRoom()
                break -- run only once per activation
            end
            task.wait(2)
        end
    end)
end)

-- Stats UI
Options.StatsUI = Tabs.Misc:AddToggle("StatsUI", { Title = "Status Checker", Default = false })
Options.StatsUI:OnChanged(function(v)
    if v then
        createStatsUI()
        Fluent:Notify({ Title = "Stats UI", Content = "UI shown", Duration = 3 })
    else
        local pg = game:GetService("Players").LocalPlayer.PlayerGui
        if pg:FindFirstChild("PlayerStatsGUI") then
            pg.PlayerStatsGUI:Destroy()
            Fluent:Notify({ Title = "Stats UI", Content = "UI closed", Duration = 3 })
        end
    end
end)

-- Merchant

local buyLoop

local itemList = {
    ["Perfect Stats Key"] = "Perfect Stats Key",
    ["Stats Key"] = "Stats Key",
    ["Trait Reroll"] = "Trait Reroll",
    ["Dr. Megga Punk"] = "Dr. Megga Punk",
    ["Cursed Finger"] = "Cursed Finger",
    ["Ranger Crystal"] = "Ranger Crystal"
}

local selectedItems = {}

local function getTableKeys(tbl)
    local keys = {}
    for k, _ in pairs(tbl) do
        table.insert(keys, k)
    end
    return keys
end

local multiBuyDropdown = Tabs.Shop:AddDropdown("AutoBuyItems", {
    Title = "Auto Buy [Merchant]",
    Description = "Select Wanted Items",
    Values = getTableKeys(itemList),
    Multi = true,
    Default = {},
})

multiBuyDropdown:OnChanged(function(Value)
    selectedItems = {}
    for itemName, state in pairs(Value) do
        if state then
            table.insert(selectedItems, itemName)
        end
    end
    Fluent:Notify({
        Title = "Auto Buy",
        Content = "Selected: " .. table.concat(selectedItems, ", "),
        Duration = 4
    })
end)


Options.AutoBuyToggle = Tabs.Shop:AddToggle("AutoBuyToggle", {
    Title = "Buy Items",
    Default = false
})

Options.AutoBuyToggle:OnChanged(function(enabled)
    buyActive = enabled
    if enabled then
        Fluent:Notify({
            Title = "Auto Buy",
            Content = "Started auto-buying...",
            Duration = 4
        })

        buyLoop = task.spawn(function()
            local RS = game:GetService("ReplicatedStorage")
            while buyActive and not Fluent.Unloaded do
                for _, itemName in pairs(selectedItems) do
                    local args = {
                        [1] = itemName,
                        [2] = 1
                    }
                    RS.Remote.Server.Gameplay.Merchant:FireServer(unpack(args))
                    task.wait(0.3) -- delay to avoid flooding
                end
                task.wait(1.5) -- overall loop delay
            end
        end)
    else
        if buyLoop then
            task.cancel(buyLoop)
            buyLoop = nil
        end
        Fluent:Notify({
            Title = "Auto Buy",
            Content = "Stopped auto-buying.",
            Duration = 3
        })
    end
end)

local RaidShopItems = {
    "Trait Reroll",
    "Stats Key",
    "Dr. Megga Punk",
    "Perfect Stats Key",
    "Cursed Finger",
    "Gourmet Meal"
}

-- Raid shop
local RaidDropdown = Tabs.Shop:AddDropdown("RaidShopItems", {
    Title = "Auto Buy [Raid Shop]",
    Description = "Select Wanted Items",
    Values = RaidShopItems,
    Multi = true,
    Default = {},
})

local selectedRaidItems = {}

RaidDropdown:OnChanged(function(Value)
    selectedRaidItems = Value -- Store selected items
end)

Options.AutoBuyRaidShop = Tabs.Shop:AddToggle("AutoBuyRaidShop", {
    Title = "Buy Items",
    Default = false,
})

Options.AutoBuyRaidShop:OnChanged(function(enabled)
    if enabled then
        Fluent:Notify({
            Title = "Raid Shop Auto Buy",
            Content = "Auto-buy started for selected items.",
            Duration = 4
        })

        task.spawn(function()
            while Options.AutoBuyRaidShop.Value and not Fluent.Unloaded do
                for itemName, isSelected in pairs(selectedRaidItems) do
                    if isSelected then
                        local success, err = pcall(function()
                            local args = { [1] = itemName, [2] = 1 }
                            game:GetService("ReplicatedStorage").Remote.Server.Gameplay.Raid_Shop:FireServer(unpack(args))
                        end)
                        if not success then
                            warn("[AutoBuy RaidShop] Failed to buy:", itemName, err)
                        end
                        task.wait(0.25)
                    end
                end
                task.wait(2)
            end
        end)
    else
        Fluent:Notify({
            Title = "Raid Shop Auto Buy",
            Content = "Auto-buy stopped.",
            Duration = 3
        })
    end
end)



-- Vote Toggles
Options.VoteNext = Tabs.Main:AddToggle("VoteNext", { Title = "Vote Next", Default = false })
Options.VoteNext:OnChanged(function(v)
    votingActive.Next = v
    if v then
        Fluent:Notify({ Title = "Vote", Content = "Voted for Next Map", Duration = 3 })
        task.spawn(function()
            while votingActive.Next do
                game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteNext:FireServer()
                task.wait(1)
            end
        end)
        Options.VoteRetry:SetValue(false)
    end
end)

Options.VoteRetry = Tabs.Main:AddToggle("VoteRetry", { Title = "Vote Retry", Default = false })
Options.VoteRetry:OnChanged(function(v)
    votingActive.Retry = v
    if v then
        Fluent:Notify({ Title = "Vote", Content = "Voted to Retry Map", Duration = 3 })
        task.spawn(function()
            while votingActive.Retry do
                game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteRetry:FireServer()
                task.wait(1)
            end
        end)
        Options.VoteNext:SetValue(false)
    end
end)

Options.SimpleAntiLag = Tabs.Misc:AddToggle("SimpleAntiLag", {
    Title = "Simple Anti-Lag",
    Default = false,
})

Options.SimpleAntiLag:OnChanged(function(state)
    if not state then
        Fluent:Notify({
            Title = "Simple Anti-Lag",
            Content = "Disabled (no changes reverted)",
            Duration = 3
        })
        return
    end

    Fluent:Notify({
        Title = "Simple Anti-Lag",
        Content = "Applying optimizations...",
        Duration = 4
    })

    local targetSettings = {
        ["Abilities VFX"] = false,
        ["Hide Cosmetic"] = true,
        ["Display Players Units"] = false,
        ["Cutscene Disabled"] = true,
        ["Low Graphic Quality"] = true,
        ["HeadBar"] = false
    }

    local RS = game:GetService("ReplicatedStorage")
    local SettingFolder = RS:FindFirstChild("Player_Settings") or RS:WaitForChild("Player_Settings")
    local PlayerSettings = SettingFolder and SettingFolder:FindFirstChild(game.Players.LocalPlayer.Name)

    for settingName, targetValue in pairs(targetSettings) do
        task.spawn(function()
            local currentSetting = nil
            if PlayerSettings then
                local settingObj = PlayerSettings:FindFirstChild(settingName)
                if settingObj and settingObj:IsA("BoolValue") then
                    currentSetting = settingObj.Value
                end
            end

            -- Fire server only if value is different
            if currentSetting ~= targetValue then
                local args = { [1] = settingName, [2] = targetValue }
                RS.Remote.Server.Settings.Setting_Event:FireServer(unpack(args))
            end
        end)
    end
end)

Options.AutoStart = Tabs.Main:AddToggle("AutoStart", {
    Title = "Auto Start",
    Default = false
})

Options.AutoStart:OnChanged(function(state)
    if not state then
        Fluent:Notify({
            Title = "Auto Start",
            Content = "Disabled (no settings reverted)",
            Duration = 3
        })
        return
    end

    local RS = game:GetService("ReplicatedStorage")
    local SettingFolder = RS:FindFirstChild("Player_Settings") or RS:WaitForChild("Player_Settings")
    local PlayerSettings = SettingFolder and SettingFolder:FindFirstChild(game.Players.LocalPlayer.Name)

    local settingName = "Auto Vote Start"
    local desiredValue = true

    task.spawn(function()
        local currentSetting = nil
        if PlayerSettings then
            local settingObj = PlayerSettings:FindFirstChild(settingName)
            if settingObj and settingObj:IsA("BoolValue") then
                currentSetting = settingObj.Value
            end
        end

        if currentSetting ~= desiredValue then
            RS.Remote.Server.Settings.Setting_Event:FireServer(settingName, desiredValue)
            Fluent:Notify({
                Title = "Auto Start",
                Content = "Setting applied!",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Auto Start",
                Content = "Already set, nothing changed",
                Duration = 3
            })
        end
    end)
end)

-- Stats ui
function createStatsUI()
    local RS, Plrs = game:GetService("ReplicatedStorage"), game:GetService("Players")
    local player, RunService = Plrs.LocalPlayer, game:GetService("RunService")

    local function waitForData()
        while not RS:FindFirstChild("Player_Data") do task.wait(1) end
        for _ = 1,10 do
            local d = RS.Player_Data:FindFirstChild(player.Name)
            if d then return d end
            task.wait(1)
        end
    end

    local gui = Instance.new("ScreenGui", player.PlayerGui)
    gui.Name = "PlayerStatsGUI"
    local frame = Instance.new("Frame", gui)
    frame.Size = UDim2.new(0,220,0,150)
    frame.Position = UDim2.new(0.5,-110,0.1,0)
    frame.BackgroundColor3 = Color3.fromRGB(40,40,40)
    frame.Active, frame.Draggable = true,true
    Instance.new("UICorner", frame).CornerRadius = UDim.new(0,8)

    local title = Instance.new("TextLabel", frame)
    title.Size = UDim2.new(1,0,0,30)
    title.BackgroundColor3 = Color3.fromRGB(30,30,30)
    title.TextColor3 = Color3.new(1,1,1)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 18
    title.Text = player.Name.."'s Stats"
    Instance.new("UICorner", title).CornerRadius = UDim.new(0,8)

    local lbls = {
        beach = Instance.new("TextLabel"),
        reroll = Instance.new("TextLabel"),
        key = Instance.new("TextLabel"),
        play = Instance.new("TextLabel")
    }
    local y=35
    for _,l in pairs(lbls) do
        l.Parent = frame
        l.Size = UDim2.new(1,-20,0,25)
        l.Position = UDim2.new(0,10,0,y)
        l.BackgroundTransparency = 1
        l.TextXAlignment = Enum.TextXAlignment.Left
        l.Font = Enum.Font.Gotham
        l.TextSize = 16
        l.TextColor3 = Color3.new(1,1,1)
        y += 25
    end
    lbls.beach.Text = "Beach Balls: Loading..."
    lbls.reroll.Text = "Trait Rerolls: Loading..."
    lbls.key.Text = "Stat Keys: Loading..."
    lbls.play.Text = "Play Time: 00:00:00"

    local data = waitForData()
    if data then
        local function link(item,parent,label,prefix)
            local itm = data[parent]:FindFirstChild(item) or data[parent]:FindFirstChild(item:gsub(" ",""))
            if itm and itm:FindFirstChild("Amount") then
                local function upd() label.Text = prefix .. itm.Amount.Value end
                itm.Amount.Changed:Connect(upd); upd()
            else label.Text = prefix.."0 (Not Found)" end
        end
        link("Trait Reroll","Items",lbls.reroll,"Trait Rerolls: ")
        link("Stats Key", "Items", lbls.key, "Stat Keys: ")
        local beach = data.Data:FindFirstChild("Beach Balls") or data.Data:FindFirstChild("BeachBalls")
        if beach then
            beach.Changed:Connect(function() lbls.beach.Text = "Beach Balls: " .. beach.Value end)
            lbls.beach.Text = "Beach Balls: " .. beach.Value
        else lbls.beach.Text = "Beach Balls: 0 (Not Found)" end
    end

    local start = os.time()
    local hb = RunService.Heartbeat:Connect(function()
        local t = os.time() - start
        lbls.play.Text = string.format("Play Time: %02d:%02d:%02d", t//3600, (t%3600)//60, t%60)
    end)
    player.AncestryChanged:Connect(function(_,p) if not p then hb:Disconnect() end end)
end

-- Reward Notifier
local function getPlayerItemAmount(name)
    local p = game:GetService("Players").LocalPlayer
    local d = game:GetService("ReplicatedStorage").Player_Data:FindFirstChild(p.Name)
    if d and d:FindFirstChild("Items") then
        local i = d.Items:FindFirstChild(name)
        if i and i:FindFirstChild("Amount") then return i.Amount.Value end
    end
    return 0
end

local lastNotify = 0
local function showGameResults()
    if os.time() - lastNotify < 4 then return end
    task.spawn(function()
        task.wait(2)
        local p = game:GetService("Players").LocalPlayer
        local rw = p:FindFirstChild("RewardsShow")
        if not rw then return end
        local kids = rw:GetChildren()
        if #kids == 0 then
            Fluent:Notify({Title="Game Ended", Content="No rewards detected", Duration=3})
            lastNotify = os.time()
            return
        end
        local lines = {"Game Ended", "REWARDS:"}
        for _,it in ipairs(kids) do
            local amt = it:IsA("NumberValue") and it.Value or ((it:FindFirstChild("Amount") and it.Amount.Value) or 1)
            table.insert(lines, ("[ %dx ] %s  [Now: %dx]"):format(amt, it.Name, getPlayerItemAmount(it.Name)))
        end
        Fluent:Notify({Title="Game Results", Content=table.concat(lines, "\n"), Duration=6})
        lastNotify = os.time()
    end)
end

task.spawn(function()
    local Plr = game:GetService("Players").LocalPlayer
    while task.wait(0.5) do
        local pg = Plr.PlayerGui
        if pg:FindFirstChild("GameEndedAnimationUI") then
            showGameResults()
            repeat task.wait(1) until not pg:FindFirstChild("GameEndedAnimationUI")
        end
    end
end)

-- Function
task.spawn(function()
    local Plr = game:GetService("Players").LocalPlayer
    while true do
        task.wait(1)

        -- Run in-game only
        if (Options.VoteNext.Value or Options.VoteRetry.Value)
            and not workspace:FindFirstChild("Lobby") then

            local pg = Plr:FindFirstChild("PlayerGui")
            if pg and pg:FindFirstChild("GameEndedAnimationUI") then
                pg.GameEndedAnimationUI:Destroy()
            end

            local summon = Plr:FindFirstChild("Summon_Amount")
            if summon then summon:Destroy() end
        end
    end
end)

-- Save
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

task.spawn(function()
    local VirtualUser = game:GetService("VirtualUser")
    local player = game:GetService("Players").LocalPlayer

    player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end)

Window:SelectTab(1)
Fluent:Notify({ Title = "Fluent", Content = "The script has been loaded.", Duration = 8 })
SaveManager:LoadAutoloadConfig()
